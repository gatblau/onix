// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "gatblau",
            "url": "http://onix.gatblau.org/",
            "email": "onix@gatblau.org"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "get": {
                "description": "Checks that the HTTP server is listening on the required port.\nUse a liveliness probe.\nIt does not guarantee the server is ready to accept calls.",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "General"
                ],
                "summary": "Check that the HTTP API is live",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/events/minio": {
            "post": {
                "description": "receives a s3:ObjectCreated:Put event sent by a MinIO format compatible source",
                "consumes": [
                    "application/json",
                    " application/yaml"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Event Sources"
                ],
                "summary": "A Webhook for MinIO compatible event sources",
                "parameters": [
                    {
                        "description": "the notification information to send",
                        "name": "event",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.MinioS3Event"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/notify": {
            "post": {
                "description": "sends a notification of the specified type",
                "consumes": [
                    "application/yaml",
                    " application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Notifications"
                ],
                "summary": "Sends a new notification",
                "parameters": [
                    {
                        "description": "the notification information to send",
                        "name": "notification",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/core.NotificationMsg"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "core.NotificationMsg": {
            "type": "object",
            "properties": {
                "content": {
                    "description": "Content of the template",
                    "type": "string",
                    "example": "A new event has been received."
                },
                "recipient": {
                    "description": "Recipient of the notification if type is email",
                    "type": "string",
                    "example": "info@email.com"
                },
                "subject": {
                    "description": "Subject of the notification",
                    "type": "string",
                    "example": "New Notification"
                },
                "type": {
                    "description": "Type of the notification (e.g. email, snow, etc.)",
                    "type": "string",
                    "example": "email"
                }
            }
        },
        "main.Bucket": {
            "type": "object",
            "properties": {
                "arn": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "ownerIdentity": {
                    "$ref": "#/definitions/main.OwnerIdentity"
                }
            }
        },
        "main.MinioS3Event": {
            "type": "object",
            "properties": {
                "EventName": {
                    "type": "string"
                },
                "Key": {
                    "type": "string"
                },
                "Records": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/main.Records"
                    }
                }
            }
        },
        "main.Object": {
            "type": "object",
            "properties": {
                "contentType": {
                    "type": "string"
                },
                "eTag": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "sequencer": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                },
                "userMetadata": {
                    "$ref": "#/definitions/main.UserMetadata"
                },
                "versionId": {
                    "type": "string"
                }
            }
        },
        "main.OwnerIdentity": {
            "type": "object",
            "properties": {
                "principalId": {
                    "type": "string"
                }
            }
        },
        "main.Records": {
            "type": "object",
            "properties": {
                "awsRegion": {
                    "type": "string"
                },
                "eventName": {
                    "type": "string"
                },
                "eventSource": {
                    "type": "string"
                },
                "eventTime": {
                    "type": "string"
                },
                "eventVersion": {
                    "type": "string"
                },
                "requestParameters": {
                    "$ref": "#/definitions/main.RequestParameters"
                },
                "responseElements": {
                    "$ref": "#/definitions/main.ResponseElements"
                },
                "s3": {
                    "$ref": "#/definitions/main.S3"
                },
                "source": {
                    "$ref": "#/definitions/main.Source"
                },
                "userIdentity": {
                    "$ref": "#/definitions/main.UserIdentity"
                }
            }
        },
        "main.RequestParameters": {
            "type": "object",
            "properties": {
                "accessKey": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                },
                "sourceIPAddress": {
                    "type": "string"
                }
            }
        },
        "main.ResponseElements": {
            "type": "object",
            "properties": {
                "content-length": {
                    "type": "string"
                },
                "x-amz-request-id": {
                    "type": "string"
                },
                "x-minio-deployment-id": {
                    "type": "string"
                },
                "x-minio-origin-endpoint": {
                    "type": "string"
                }
            }
        },
        "main.S3": {
            "type": "object",
            "properties": {
                "bucket": {
                    "$ref": "#/definitions/main.Bucket"
                },
                "configurationId": {
                    "type": "string"
                },
                "object": {
                    "$ref": "#/definitions/main.Object"
                },
                "s3SchemaVersion": {
                    "type": "string"
                }
            }
        },
        "main.Source": {
            "type": "object",
            "properties": {
                "host": {
                    "type": "string"
                },
                "port": {
                    "type": "string"
                },
                "userAgent": {
                    "type": "string"
                }
            }
        },
        "main.UserIdentity": {
            "type": "object",
            "properties": {
                "principalId": {
                    "type": "string"
                }
            }
        },
        "main.UserMetadata": {
            "type": "object",
            "properties": {
                "content-type": {
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "0.0.4",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "Artisan's Doorman Proxy",
	Description: "Notifications & Event Sources for Doorman",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
