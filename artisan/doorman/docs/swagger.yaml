definitions:
  core.NotificationMsg:
    properties:
      content:
        description: Content of the template
        example: A new event has been received.
        type: string
      recipient:
        description: Recipient of the notification if type is email
        example: info@email.com
        type: string
      subject:
        description: Subject of the notification
        example: New Notification
        type: string
      type:
        description: Type of the notification (e.g. email, snow, etc.)
        example: email
        type: string
    type: object
  main.Bucket:
    properties:
      arn:
        type: string
      name:
        type: string
      ownerIdentity:
        $ref: '#/definitions/main.OwnerIdentity'
    type: object
  main.MinioS3Event:
    properties:
      EventName:
        type: string
      Key:
        type: string
      Records:
        items:
          $ref: '#/definitions/main.Records'
        type: array
    type: object
  main.Object:
    properties:
      contentType:
        type: string
      eTag:
        type: string
      key:
        type: string
      sequencer:
        type: string
      size:
        type: integer
      userMetadata:
        $ref: '#/definitions/main.UserMetadata'
      versionId:
        type: string
    type: object
  main.OwnerIdentity:
    properties:
      principalId:
        type: string
    type: object
  main.Records:
    properties:
      awsRegion:
        type: string
      eventName:
        type: string
      eventSource:
        type: string
      eventTime:
        type: string
      eventVersion:
        type: string
      requestParameters:
        $ref: '#/definitions/main.RequestParameters'
      responseElements:
        $ref: '#/definitions/main.ResponseElements'
      s3:
        $ref: '#/definitions/main.S3'
      source:
        $ref: '#/definitions/main.Source'
      userIdentity:
        $ref: '#/definitions/main.UserIdentity'
    type: object
  main.RequestParameters:
    properties:
      accessKey:
        type: string
      region:
        type: string
      sourceIPAddress:
        type: string
    type: object
  main.ResponseElements:
    properties:
      content-length:
        type: string
      x-amz-request-id:
        type: string
      x-minio-deployment-id:
        type: string
      x-minio-origin-endpoint:
        type: string
    type: object
  main.S3:
    properties:
      bucket:
        $ref: '#/definitions/main.Bucket'
      configurationId:
        type: string
      object:
        $ref: '#/definitions/main.Object'
      s3SchemaVersion:
        type: string
    type: object
  main.Source:
    properties:
      host:
        type: string
      port:
        type: string
      userAgent:
        type: string
    type: object
  main.UserIdentity:
    properties:
      principalId:
        type: string
    type: object
  main.UserMetadata:
    properties:
      content-type:
        type: string
    type: object
  types.Command:
    properties:
      description:
        description: the command description
        example: scan files in specified path
        type: string
      error_regex:
        description: a regex used to determine if the command execution has errored
        example: '.*Infected files: [^0].*'
        type: string
      name:
        description: a unique name for the command
        example: clamscan
        type: string
      stop_on_error:
        description: determines if the process should stop on a command execution
          error
        example: true
        type: boolean
      value:
        description: the value of the command
        example: freshclam && clamscan -r ${path}
        type: string
    type: object
  types.ImageRegistry:
    properties:
      domain:
        description: URI the location of the container image registry
        example: images.acme.com:5000
        type: string
      group:
        description: |-
          Group the group (location withing the registry) where the packages should be placed
          if not specified, the group from the package to push is used
        example: test/groupA
        type: string
      pwd:
        description: Pwd the password to authenticate with the container image registry
        type: string
      user:
        description: User the username to authenticate with the container image registry
        type: string
    type: object
  types.InRoute:
    properties:
      bucket_name:
        description: BucketName the name of the S3 bucket containing files to download
        type: string
      description:
        description: Description a description indicating the purpose of the route
        example: the inbound route for supplier A
        type: string
      filter:
        description: |-
          Filter a regular expression to filter publication events and prevent doorman from being invoked
          if not defined, no filter is applied
        type: string
      name:
        description: Name the name of the route
        example: SUPPLIER_A_IN_ROUTE
        type: string
      public_key:
        description: PublicKey the PGP public key used to verify the author of the
          downloaded files
        type: string
      pwd:
        description: Pwd the password to authenticate against the remote ServiceHost
        type: string
      service_host:
        description: ServiceHost the remote host from where inbound files should be
          downloaded
        example: s3.supplier-a.com
        type: string
      service_id:
        description: ServiceId a unique identifier for the S3 service where inbound
          files should be downloaded
        type: string
      user:
        description: User the username to authenticate against the remote ServiceHost
        type: string
      verify:
        description: Verify a flag indicating whether author verification should be
          enabled
        type: boolean
      webhook_token:
        description: |-
          WebhookToken an authentication token to be passed by an event sender to be authenticated by the doorman's proxy webhook
          its value can be anything, but it is typically a base64 encoded global unique identifier
        example: JFkxnsn++02UilVkYFFC9w==
        type: string
      webhook_whitelist:
        description: WebhookWhitelist the list of IP addresses accepted by the webhook
          (whitelist)
        items:
          type: string
        type: array
    type: object
  types.Key:
    properties:
      description:
        description: a description of the intended use of the key
        type: string
      name:
        description: a unique identifier for the digital key
        type: string
      owner:
        description: the name of the entity owning the key
        type: string
      value:
        description: the actual content of the key
        type: string
    type: object
  types.Notification:
    properties:
      name:
        description: unique identifier for the notification
        type: string
      recipient:
        description: Recipient of the notification if type is email
        type: string
      template:
        description: Template to use for content of the notification
        type: string
      type:
        description: Type of the notification (e.g. email, snow, etc.)
        type: string
    type: object
  types.NotificationTemplate:
    properties:
      content:
        description: Content of the template
        type: string
      name:
        description: Name unique identifier for notification template
        type: string
      subject:
        description: Subject of the notification
        type: string
    type: object
  types.OutRoute:
    properties:
      description:
        description: Description describes the purpose of the route
        example: outbound route for ACME company logistics department
        type: string
      image_registry:
        $ref: '#/definitions/types.ImageRegistry'
        description: ImageRegistry the information about the image registry that is
          the destination for the spec images
      name:
        description: Name the name uniquely identifying the outbound route
        example: ACME_OUT_LOGISTICS
        type: string
      package_registry:
        $ref: '#/definitions/types.PackageRegistry'
        description: PackageRegistry the information about the artisan registry that
          is the destination for the spec packages
      s3_store:
        $ref: '#/definitions/types.S3Store'
        description: S3Store the information about the S3 service that is the destination
          for the spec tarball files
    type: object
  types.PackageRegistry:
    properties:
      domain:
        description: URI the location of the package registry
        example: packages.acme.com:8082
        type: string
      group:
        description: |-
          Group the group (location withing the registry) where the packages should be placed
          if not specified, the group from the package to push is used
        example: test/groupA
        type: string
      pwd:
        description: Pwd the password to authenticate with the package registry
        example: d8y2b9fc97y23!$^
        type: string
      user:
        description: User the username to authenticate with the package registry
        example: test_user
        type: string
    type: object
  types.PipelineConf:
    properties:
      cmd_failed_notification:
        description: CmdFailedNotification notification to use in case of command
          failure
        type: string
      commands:
        description: Commands a list of the command names to be executed between inbound
          and outbound routes
        items:
          type: string
        type: array
      error_notification:
        description: ErrorNotification notification to use in case of errors
        type: string
      inbound_routes:
        description: InboundRoutes  the name of the inbound route to use in the pipeline
        items:
          type: string
        type: array
      name:
        description: Name the name uniquely identifying the pipeline
        example: ACME_PIPELINE
        type: string
      outbound_routes:
        description: OutboundRoutes  the name of the outbound route to use in the
          pipeline
        items:
          type: string
        type: array
      success_notification:
        description: SuccessNotification notification to use in case of success
        type: string
    type: object
  types.S3Store:
    properties:
      bucket_uri:
        description: BucketURI the URI of the folder where to upload the spec tar
          files
        type: string
      pwd:
        description: Pwd the password of the outbound S3 bucket
        type: string
      user:
        description: User the username of the outbound S3 bucket
        type: string
    type: object
info:
  contact:
    email: onix@gatblau.org
    name: gatblau
    url: http://onix.gatblau.org/
  description: Securely transfer artisan packages and container images between repositories
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Artisan's Doorman
  version: 0.0.4
paths:
  /:
    get:
      description: |-
        Checks that the HTTP server is listening on the required port.
        Use a liveliness probe.
        It does not guarantee the server is ready to accept calls.
      produces:
      - text/plain
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Check that the HTTP API is live
      tags:
      - General
  /command:
    put:
      consumes:
      - application/yaml
      - ' application/json'
      description: creates or updates a command
      parameters:
      - description: the data for the command to persist
        in: body
        name: key
        required: true
        schema:
          $ref: '#/definitions/types.Command'
      produces:
      - text/plain
      responses:
        "200":
          description: OK
          schema:
            type: string
        "201":
          description: Created
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Creates or updates a command
      tags:
      - Commands
  /event/{service-id}/{bucket-name}/{folder-name}:
    post:
      description: Triggers the ingestion of a specification
      parameters:
      - description: a unique identifier for the bucket endpoint (e.g. x-minio-deployment-id
          for MinIO)
        in: path
        name: service-id
        required: true
        type: string
      - description: the name of the bucket that contains the uploaded files
        in: path
        name: bucket-name
        required: true
        type: string
      - description: the name of the folder within the bucket that contains the uploaded
          files
        in: path
        name: folder-name
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "201":
          description: Created
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Triggers the ingestion of an artisan spec artefacts
      tags:
      - Webhook
  /events/minio:
    post:
      consumes:
      - application/json
      - ' application/yaml'
      description: receives a s3:ObjectCreated:Put event sent by a MinIO format compatible
        source
      parameters:
      - description: the notification information to send
        in: body
        name: event
        required: true
        schema:
          $ref: '#/definitions/main.MinioS3Event'
      produces:
      - text/plain
      responses:
        "201":
          description: Created
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: A Webhook for MinIO compatible event sources
      tags:
      - Event Sources
  /job:
    get:
      description: Gets a list of top job information logs
      parameters:
      - description: the number of top jobs to retrieve, if not specified returns
          the top 1 job
        in: query
        name: count
        type: integer
      produces:
      - application/json
      - ' application/yaml'
      - ' application/xml'
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Gets top jobs
      tags:
      - Jobs
  /key:
    put:
      consumes:
      - application/yaml
      - ' application/json'
      description: |-
        creates or updates a cryptographic key used by either inbound or outbound routes to verify or sign
        packages respectively
      parameters:
      - description: the data for the key to persist
        in: body
        name: key
        required: true
        schema:
          $ref: '#/definitions/types.Key'
      produces:
      - text/plain
      responses:
        "200":
          description: OK
          schema:
            type: string
        "201":
          description: Created
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Creates or updates a cryptographic key
      tags:
      - Keys
  /notification:
    get:
      description: gets all notifications
      produces:
      - application/json
      - ' application/yaml'
      - ' application/xml'
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Gets all notifications
      tags:
      - Notifications
    put:
      consumes:
      - application/yaml
      - ' application/json'
      description: creates or updates a notification
      parameters:
      - description: the data for the notification to persist
        in: body
        name: key
        required: true
        schema:
          $ref: '#/definitions/types.Notification'
      produces:
      - text/plain
      responses:
        "200":
          description: OK
          schema:
            type: string
        "201":
          description: Created
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Creates or updates a notification
      tags:
      - Notifications
  /notification-template:
    get:
      description: gets all notification templates
      produces:
      - application/json
      - ' application/yaml'
      - ' application/xml'
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Gets all notification templates
      tags:
      - Notifications
    put:
      consumes:
      - application/yaml
      - ' application/json'
      description: creates or updates a notification template
      parameters:
      - description: the data for the notification template to persist
        in: body
        name: key
        required: true
        schema:
          $ref: '#/definitions/types.NotificationTemplate'
      produces:
      - text/plain
      responses:
        "200":
          description: OK
          schema:
            type: string
        "201":
          description: Created
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Creates or updates a notification template
      tags:
      - Notifications
  /notify:
    post:
      consumes:
      - application/yaml
      - ' application/json'
      description: sends a notification of the specified type
      parameters:
      - description: the notification information to send
        in: body
        name: notification
        required: true
        schema:
          $ref: '#/definitions/core.NotificationMsg'
      produces:
      - text/plain
      responses:
        "201":
          description: Created
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Sends a new notification
      tags:
      - Notifications
  /pipe:
    get:
      description: gets all pipelines
      produces:
      - application/json
      - ' application/yaml'
      - ' application/xml'
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Gets all pipelines
      tags:
      - Pipelines
    put:
      consumes:
      - application/yaml
      - ' application/json'
      description: creates or updates an inbound route
      parameters:
      - description: the data for the pipeline to persist
        in: body
        name: key
        required: true
        schema:
          $ref: '#/definitions/types.PipelineConf'
      produces:
      - text/plain
      responses:
        "200":
          description: OK
          schema:
            type: string
        "201":
          description: Created
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Creates or updates an inbound route
      tags:
      - Pipelines
  /pipe/{name}:
    get:
      description: gets a pipeline
      parameters:
      - description: the name of the pipeline to retrieve
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      - ' application/yaml'
      - ' application/xml'
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Gets a pipeline
      tags:
      - Pipelines
  /route/in:
    put:
      consumes:
      - application/yaml
      - ' application/json'
      description: creates or updates an inbound route
      parameters:
      - description: the data for the inbound route to persist
        in: body
        name: key
        required: true
        schema:
          $ref: '#/definitions/types.InRoute'
      produces:
      - text/plain
      responses:
        "200":
          description: OK
          schema:
            type: string
        "201":
          description: Created
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Creates or updates an inbound route
      tags:
      - Routes
  /route/out:
    put:
      consumes:
      - application/yaml
      - ' application/json'
      description: creates or updates an inbound route
      parameters:
      - description: the data for the outbound route to persist
        in: body
        name: key
        required: true
        schema:
          $ref: '#/definitions/types.OutRoute'
      produces:
      - text/plain
      responses:
        "200":
          description: OK
          schema:
            type: string
        "201":
          description: Created
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Creates or updates an inbound route
      tags:
      - Routes
  /token:
    get:
      description: |-
        get authentication information for all webhook tokens
        an inbound route, returning required referrer URL and IP white list
        NOTE: this endpoint is called by the proxy to authenticate its webhook
      produces:
      - application/json
      - ' application/yaml'
      - ' application/xml'
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: get authentication information for all webhook tokens
      tags:
      - Webhook
  /token/{token-value}:
    get:
      description: |-
        checks that an opaque string / authentication token sent to a webhook has been defined for
        an inbound route, returning required referrer URL and IP white list
        NOTE: this endpoint is called by the proxy to authenticate its webhook
      parameters:
      - description: the authentication token presented to doorman proxy webhook
        in: path
        name: token-value
        required: true
        type: string
      produces:
      - application/json
      - ' application/yaml'
      - ' application/xml'
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get authentication information for specified webhook token
      tags:
      - Webhook
swagger: "2.0"
